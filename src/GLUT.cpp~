#include <cgRender.h>

//global variables
static struct {
    
    ppm_file* ppm;
    
    vector<glm::vec3> points;
    vector<glm::vec3> normals;
    vector<glm::vec3> polygons;
    vector<glm::vec2> textures;

    int width,height;
    float* cam;
    float* centre;
} global;

void setupGlobal(void)
{
    global.width = 512;
    global.height = 512;
    float cam[3] = {0.36,-0.1448,-0.14};
    float centre[3] = {0.05,-0.105,-0.06};
    global.cam = cam;
    global.centre = centre;
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glBindTexture(GL_TEXTURE_2D,&global.ppm->texture);

    glm::vec3 poly;

    for (int i = 0; i < (int)global.polygons.size(); i++)
    {
        poly = (global.polygons)[i];

        glBegin(GL_POLYGON);
        
        for (int j = 0; j < 3; j++)
        {
            glNormal3fv(glm::value_ptr((global.normals)[poly[j]]));
            glVertex3fv(glm::value_ptr((global.points)[poly[j]]));
            glTexCoord2fv(glm::value_ptr((global.textures)[poly[j]]));
        }
        glEnd();
    }

    glFlush();

    glutPostRedisplay();
}

void reload()
{
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(global.cam[0],global.cam[1],global.cam[2],
            global.centre[0],global.centre[1],global.centre[2],
            0, 1, 0
            );
    cout << " Now at " << global.cam[0] << ", " << global.cam[1] << ", " << global.cam[2] << endl;
    cout << " Now centred at " << global.centre[0] << ", " << global.centre[1] << ", " << global.centre[2] << endl;
}

inline float to_radians(float degrees)
{
    return (4 * atan(1) * degrees / 180);
}

void reshape (int x, int y)
{
    glViewport (0, 0, x, y); 

    glMatrixMode (GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(to_radians(90), (float) x / (float) y, 0.1, 100);

    reload();
}

void keyboard(unsigned char key, int, int)
{
    switch (key)
    {
        case 27: // ESC
        exit(0);
        break;
        case 'q': case 'Q':
            global.cam[0] -= 0.1;
            break;
        case 'w': case 'W':
            global.cam[0] += 0.1;
            break;
        case 'a': case 'A':
            global.cam[1] -= 0.1;
            break;
        case 's': case 'S':
            global.cam[1] += 0.1;
            break;
        case 'z': case 'Z':
            global.cam[2] -= 0.1;
            break;
        case 'x': case 'X':
            global.cam[2] += 0.1;
            break;
        case 'e': case 'E':
            global.centre[0] -= 0.01;
            break;
        case 'r': case 'R':
            global.centre[0] += 0.01;
            break;
        case 'd': case 'D':
            global.centre[1] -= 0.01;
            break;
        case 'f': case 'F':
            global.centre[1] += 0.01;
            break;
        case 'c': case 'C':
            global.centre[2] -= 0.01;
            break;
        case 'v': case 'V':
            global.centre[2] += 0.01;
            break;
    }
    
    reload();

}

glm::vec3 findNormal(glm::mat3 polyPoints)
{
    return (glm::normalize(glm::cross(polyPoints[2] - polyPoints[0], 
                polyPoints[1] - polyPoints[0])));
}



void buildNormals(void)
{
    cout << "Building normals" << endl;
    glm::mat3 points;
    glm::vec3 norm;
    
    cout << "Allocating done" << endl;

    BOOST_FOREACH(glm::vec3 poly, global.polygons)
    {
        for (int i = 0; i < 3; i++)
        {
            points[i] = (global.points)[poly[i]];
        }

        norm = findNormal(points);

        for (int i = 0; i < 3; i++)
        {
            (global.normals)[(int)poly[i]] += norm;
        }
    }

    for (int i = 0; i < (int)global.points.size();i++)
    {
        (global.normals)[i] = glm::normalize((global.normals)[i]);
    }
}

void init()
{
    cout << "Initialising" << endl;
    glClearColor(0.0,0.0,0.0,0.0);
    
    cout << "Generating textures" << endl;
    glGenTextures(1, (GLuint*)global.ppm->texture);
    cout << "Binding textures" << endl;
    glBindTexture(GL_TEXTURE_2D,*global.ppm->texture);
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_REPEAT);
    cout << "Set repeat paramters" << endl;
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexEnvf(GL_TEXTURE_ENV,GL_TEXTURE_ENV_MODE,GL_MODULATE);
    
    glTexImage2D(GL_TEXTURE_2D,0,GL_RGB,global.ppm->width,global.ppm->height,
                 0,GL_RGB,GL_UNSIGNED_BYTE,&global.ppm->texture);

    glShadeModel(GL_FLAT);
    
    GLfloat position[4] = {-20.0f, 20.0f, 100.0f, 0.0f};
    const GLfloat ambient[4] = {0.1f,0.1f,0.1f,1.0f};
    const GLfloat diffuse[4] = {0.8f, 0.8f, 0.8f, 1.0f};
    const GLfloat spec[4] = {1.0f,1.0f,1.0f,1.0f};
    

    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);

    glLightfv(GL_LIGHT0,GL_POSITION,position);
    glLightfv(GL_LIGHT0,GL_AMBIENT,ambient);
    glLightfv(GL_LIGHT0,GL_DIFFUSE,diffuse);
    glLightfv(GL_LIGHT0,GL_SPECULAR,spec);

    glEnable(GL_DEPTH_TEST);
    glEnable (GL_TEXTURE_2D);
}

int main(int argc, char** argv)
{
    // Check input arguments
    // and print a usage on failure
    if (argc != 3)
    {
        cout << "Usage: " << argv[0] << "and then a .vtk file, "
            << "then a texture file" << endl;
        exit(EXIT_FAILURE);
    }

    setupGlobal();

    parse_vtk_file(argv[1], 
                   global.points,
                   global.normals, 
                   global.polygons, 
                   global.textures);
    
    global.ppm = parse_ppm_file(argv[2]);
    
    glutInit(&argc,argv);

    glutInitDisplayMode(GLUT_SINGLE|GLUT_DEPTH|GLUT_RGB);

    glutInitWindowSize(global.width,global.height);
    
    glutInitWindowPosition(0,0);

    glutCreateWindow(argv[0]);

    buildNormals();

    init();

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutMainLoop();

    exit(EXIT_SUCCESS);
}
